pub struct Bootrom {
    pub bootrom: Vec<u8>,
    pub is_active: bool,
}

impl Bootrom {
    pub fn new() -> Self {
        Bootrom {
            // bootrom: vec![], // Placeholder for Boot ROM data
            bootrom: vec![
                0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26,
                0xFF, 0xE, 0x11, 0x3E, 0x80, 0x32, 0xE2, 0xC, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77,
                0x77, 0x3E, 0xFC, 0xE0, 0x47, 0x11, 0x4, 0x1, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95,
                0x0, 0xCD, 0x96, 0x0, 0x13, 0x7B, 0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x0, 0x6,
                0x8, 0x1A, 0x13, 0x22, 0x23, 0x5, 0x20, 0xF9, 0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21,
                0x2F, 0x99, 0xE, 0xC, 0x3D, 0x28, 0x8, 0x32, 0xD, 0x20, 0xF9, 0x2E, 0xF, 0x18,
                0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x4, 0x1E, 0x2,
                0xE, 0xC, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0xD, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
                0xE, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x6, 0x1E, 0xC1, 0xFE, 0x64,
                0x20, 0x6, 0x7B, 0xE2, 0xC, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15,
                0x20, 0xD2, 0x5, 0x20, 0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x6, 0x4, 0xC5, 0xCB,
                0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17, 0x5, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9,
                0xCE, 0xED, 0x66, 0x66, 0xCC, 0xD, 0x0, 0xB, 0x3, 0x73, 0x0, 0x83, 0x0, 0xC, 0x0,
                0xD, 0x0, 0x8, 0x11, 0x1F, 0x88, 0x89, 0x0, 0xE, 0xDC, 0xCC, 0x6E, 0xE6, 0xDD,
                0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0xE, 0xEC, 0xCC, 0xDD, 0xDC, 0x99,
                0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C, 0x21,
                0x4, 0x1, 0x11, 0xA8, 0x0, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34,
                0x20, 0xF5, 0x6, 0x19, 0x78, 0x86, 0x23, 0x5, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E,
                0x1, 0xE0, 0x50,
            ], // Placeholder for Boot ROM data
            is_active: false,
        }
    }

    pub fn activate(&mut self) {
        self.is_active = true;
    }

    pub fn deactivate(&mut self) {
        self.is_active = false;
    }

    pub fn get_byte(&self, addr: usize) -> u8 {
        self.bootrom[addr]
    }
}
